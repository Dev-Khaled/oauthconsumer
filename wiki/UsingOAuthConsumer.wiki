#summary The HOWTO for using OAuthConsumer in your Mac app.
#labels Featured,Phase-Implementation

== Introduction ==

This HOWTO is for developers interested in adding support for OAuth to their Mac apps. If you would like to build your own version of the framework, please see BuildingOAuthConsumer.

== Importing the Framework ==

There are 3 steps for adding the pre-compiled framework to your app:
  # Drag the framework into your Linked Frameworks group in Xcode.
  # Create a new Copy Files Build Phase.
  # Drag the framework into the new Copy Files Build Phase.

== Using OAuthConsumer ==

=== Set Up ===

The first thing you will need in order to access a service providing OAuth support is a Consumer Key and a Consumer Secret. These must be obtained directly from the service provider. The OAuth Core 1.0 Spec does not address automatically generating such items.

The second thing required is a set of URLs provided for OAuth interactions by your service provider. These should be documented by the service provider and include:

  * Request Token URL
  * User Authorization URL
  * Access Token URL

Additionally, there should be a set of API standards to use in order to interact with the service after obtaining the OAuth credentials.

Once you have obtained your Consumer Key, Consumer Secret, and know your OAuth endpoint URLs, you are ready to begin writing code.

=== Getting an Unauthorized Request Token ===

The first order of business when communicating with an OAuth service provider is obtaining an Unauthorized Request Token. Using your Consumer Key, Consumer Secret, and the service provider's Request Token URL, you can send a request an Unauthorized Request Token like this:

{{{

    OAConsumer *consumer = [[OAConsumer alloc] initWithKey:@"key123"
                                                    secret:@"secret123"];

    NSURL *url = [NSURL URLWithString:@"http://example.com/get_request_token"];

    OAMutableURLRequest *request = [[OAMutableURLRequest alloc] initWithURL:url
                                                                   consumer:consumer
                                                                      token:nil   // we don't have a Token yet
                                                                      realm:nil   // our service provider doesn't specify a realm
                                                          signatureProvider:nil]; // use the default method, HMAC-SHA1

    [request setHTTPMethod:@"POST"];

    OADataFetcher *fetcher = [[OADataFetcher alloc] init];

    [fetcher fetchDataWithRequest:request
                         delegate:self
                didFinishSelector:@selector(requestTokenTicket:didFinishWithData:)
                  didFailSelector:@selector(requestTokenTicket:didFailWithError:)];

}}}

This page is a work in progress. More to come later.